package allocation

import allocation.*
import allocation.facts.*
import allocation.actions.*
import allocation.newagents.*
import java.lang.Double
import java.lang.Integer
import java.util.List

global org.apache.log4j.Logger logger
global uk.ac.imperial.presage2.core.db.StorageService sto

declare negResourceHandler
	round : int
	quantity : double
	pool : CommonPool
end

rule "Log pool level after appropriation"
	salience -900
	ruleflow-group 'exclude'
	when
		$pool : CommonPool($pid : id, $level : resourceLevel)
		Institution($round : round, pool == $pool)
	then
		logger.info("Pool level: "+ $level);
		if ($level >= 0){
			sto.getSimulation().getEnvironment().setProperty("level", $round, Double.toString($level));
		}
		else{
			sto.getSimulation().getEnvironment().setProperty("level", $round, Double.toString(0));
			insert( new negResourceHandler($round,$level,$pool));
		}
end

rule "Log sum of approprations"
	salience -1000
	ruleflow-group 'exclude'
	when
		Institution($round : round, $pool : pool)
		$appropriations :  List() from collect ( Appropriated(pool == $pool, round == $round))
		not (exists negResourceHandler(round == $round, pool == $pool))
	then
		double appSum = 0;
		for (Object a : $appropriations){
			Appropriated app = (Appropriated) a;
			appSum += app.getQuantity();
		}
		logger.info("Sum of appropriation: "+ appSum);
		sto.getSimulation().getEnvironment().setProperty("appropriation sum", $round, Double.toString(appSum));
end

rule "Log sum of approprations when gone bankrupt"//agents can't appropriate negative amount!!
	salience -1000
	ruleflow-group 'exclude'
	when
		Institution($round : round, $pool : pool)
		$appropriations :  List() from collect ( Appropriated(round == $round, pool == $pool))
		negResourceHandler(round == $round, $level : quantity, pool == $pool)
	then
		double appSum = 0;
		for (Object a : $appropriations){
			Appropriated app = (Appropriated) a;
			appSum += app.getQuantity();
		}
		appSum += $level; //negative resource
		logger.info("Sum of appropriation: "+ appSum);
		sto.getSimulation().getEnvironment().setProperty("appropriation sum", $round, Double.toString(appSum));
end

rule "Log active members" //activeMemberCount is value start only
	salience -1000
	ruleflow-group 'exclude'
	when
		Institution($iid : id, $round : round, $pool : pool)
		$members :  List() from collect ( Member(institutionId == $iid, active == true))
	then
		logger.info("Active members: "+ $members.size());
		sto.getSimulation().getEnvironment().setProperty("active members", $round, Integer.toString($members.size()));
end

rule "log whether institution is alive or dead" //for averaging purposes
	salience -1000
	ruleflow-group 'exclude'
	when
		$t : IntegerTime( )
		$institutions : List() from collect ( Institution(round == $t.intValue()) )
	then
		logger.info("Live institutions "+ $institutions.size());
		sto.getSimulation().getEnvironment().setProperty("live institution", $t.intValue(), Integer.toString($institutions.size()));
end
		
rule "log change of head"
	salience -1000
	ruleflow-group 'exclude'
	when
		Institution($iid : id, $round : round, $pool : pool)
		HeadChange($name : agent, round == $round, institution == $iid)
		Head(name == $name, $hid : id, institutionId == $iid)
	then
		logger.info("Head changed to " + $name);
		//sto.getSimulation().getEnvironment().setProperty("new head", $round, Integer.toString($hid));
		sto.getSimulation().getEnvironment().setProperty("new head", $round, Integer.toString(1));
end
	

rule "display dropped heads"
	salience -1000
	ruleflow-group 'exclude'
	when
		Institution($iid : id, $round : round)
		$m : Member(institutionId == $iid, $dh : droppedHeads)
		//$dh : List() from accumulate ( Head($name : name, institutionId == $iid), collectList($name) )
	then
	//	String listString = "";
	//	for (Object s : $dh){
	 //   	listString += (String) s + ", ";
	//	}
		
		logger.info($dh.size() +  " dropped Heads by member " + $m.getName() + ": " + $dh);
		//sto.getSimulation().getEnvironment().setProperty("new head", $round, Integer.toString($hid));
		//sto.getSimulation().getEnvironment().setProperty("new head", $round, listString);
end

rule "list of dropped heads"
	salience -1000
	ruleflow-group 'exclude'
	when 
		Institution($iid : id, $round : round)
		//$l : Number( ) from accumulate ( $m : Member(institutionId == $iid), sum($m.getDroppedHeads().size())) 
		//$d1 : List( ) from accumulate ( $m : Member(institutionId == $iid), collectList($m.getDroppedHeads()))
		$l : List( ) from collect (Member(institutionId == $iid))
		//$d2 : List( ) from accumulate ( $m : Member(institutionId == $iid), collectList($m.getDroppedHeads().size())) 
	then
		//logger.info($d2 + " heads List Size " + $d1);
		//logger.info($d1.size() +"-"+ new ArrayList($d1).size());
		int length = 0;
		for (Object o : $l){
			Member m = (Member) o;
			length += m.getDroppedHeads().size();
		}
		logger.info($l.size() + " Members have " + length + " heads on lists.");
		//sto.getSimulation().getEnvironment().setProperty("headsListSize", $round, Integer.toString(length));
end