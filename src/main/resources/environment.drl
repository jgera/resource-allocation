package allocation

import allocation.*
import allocation.facts.*
import allocation.actions.*
import allocation.agents.*
import uk.ac.imperial.presage2.core.IntegerTime
import java.lang.Math

global org.apache.log4j.Logger logger

declare Processed
	action : TimestampedAction
end

declare Appropriated
	agent : Agent
	round : int
	quantity : double
end

rule "Max level" // Given an overfilled CommonPool, reset resource level to maximum
	salience -11
	when
		$pool : CommonPool( resourceLevel > maxLevel, $max : maxLevel)
	then
		modify($pool) {
			setResourceLevel($max);
		}
		logger.info("Pool was overfilled, reseting to max level");
end

rule "Refill pool"
	salience -10
	when
		// when a new round occurs
		$t : IntegerTime() 
		// and there is a pool which has not been filled in this round
		$pool : CommonPool( $t.intValue() > getLastFilled())
		// and the institution governing this pool is in the 'Exclude' phase
		Institution( state == Phase.Exclude, pools contains $pool )
	then // refill pool
		double fillAmount = $pool.getMaxLevel() / 2;
		int time = $t.intValue();
		if(time < 50) {
			fillAmount *= 1;
		} else if(time < 100) {
			fillAmount *= 0.95;
		} else if(time < 150) {
			fillAmount *= 0.87;
		} else if(time < 200) {
			fillAmount *= 0.52;
		} else if(time < 250) {
			fillAmount *= 0.92;
		} else if(time < 300) {
			fillAmount *= 0.97;
		} else if(time < 350) {
			fillAmount *= 0.62;
		} else if(time < 400) {
			fillAmount *= 0.90;
		} else if(time < 450) {
			fillAmount *= 0.50;
		} else {
			fillAmount *= 0.91;
		}
		modify($pool) {
			setResourceLevel( $pool.getResourceLevel() + fillAmount),
			setLastFilled( time )
		}
		logger.info("Fill resource by "+ fillAmount +", pool resource level is "+ $pool.getResourceLevel() );
end

rule "Take out of pool"
	when
		// A player $ag has appropriated from pool $pid in round $round
		$a : Appropriate( $pid : pool, $ag : player, $round : round )
		// This player has not already arready appropriated in this round
		not( Appropriated( agent == $ag, round == $round ) )
		// This action has not already been processed
		not( exists( Processed( $a ;) ) )
		// Get pool the action occurs in
		$pool : CommonPool( id == $pid )
		// The institution governing the pool is in the appropriate phase
		Institution( pools contains $pool, state == Phase.Appropriate, round == $round )
		// Check that this agent can appropriate from this pool
		Agent( this == $ag, getPool() == $pid )
	then
		// Create Appropriated fact
		insert( new Appropriated( $ag, $round, Math.min( $a.amount, $pool.getResourceLevel() ) ) );
		// modify the resource level in the pool
		modify($pool) {
			setResourceLevel( $pool.getResourceLevel() - $a.amount )
		}
		// mark action as processed
		insert( new Processed( $a ) );
		logger.info($a);
end

rule "End of the world"
	when
		$pool : CommonPool( resourceLevel < 0 )
	then
		retract($pool);
		logger.info("DEPLEATED!!");
end

rule "Prune Appropriate"
	when
		$pool : CommonPool( $id : id )
		Institution( pools contains $pool, $round : round )
		$a : Appropriate( pool == $id, round < $round )
	then
		retract($a);
		//logger.info("Prune "+ $a);
end

rule "Prune Processed"
	when
		$p : Processed($a : action)
		not(exists(TimestampedAction(this == $p.action)))
	then
		retract( $p );
end

