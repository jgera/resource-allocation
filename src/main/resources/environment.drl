package allocation

import allocation.*
import allocation.facts.*
import allocation.actions.*
import allocation.newagents.*
import uk.ac.imperial.presage2.core.IntegerTime
import java.lang.Math
import java.util.List

global org.apache.log4j.Logger logger


declare Appropriated
	agent : String //name
	round : int
	quantity : double
	pool : CommonPool
end

declare LevelAdjusted
	institution : Institution
	round : IntegerTime
end

rule "Max level" // Given an overfilled CommonPool, reset resource level to maximum
	salience -11
	ruleflow-group 'init'
	when
		$pool : CommonPool( resourceLevel > maxLevel, $max : maxLevel)
	then
		modify($pool) {
			setResourceLevel($max),
			setStartResourceLevel($max)
		}
		logger.info("Pool was overfilled, resetting to max level=" + $max);
end

rule "Refill pool - CUSTOM scheme"
	salience -10
	ruleflow-group 'init'
	when
		// when a new round occurs
		$t : IntegerTime() 
		// and there is a pool which has not been filled in this round
		$pool : CommonPool( $t.intValue() > getLastFilled(), getRefScheme() == RefillScheme.CUSTOM)
		// and the institution governing this pool is in the 'Exclude' phase
		$i : Institution( pool == $pool )
	then // refill pool
		double fillAmount = $pool.getMaxLevel() / 2;
		int time = $t.intValue();
		if(time < 50) {
			fillAmount *= 1;
		} else if(time < 100) {
			fillAmount *= 0.95;
		} else if(time < 150) {
			fillAmount *= 0.87;
		} else if(time < 200) {
			fillAmount *= 0.52;
		} else if(time < 250) {
			fillAmount *= 0.92;
		} else if(time < 300) {
			fillAmount *= 0.97;
		} else if(time < 350) {
			fillAmount *= 0.62;
		} else if(time < 400) {
			fillAmount *= 0.90;
		} else if(time < 450) {
			fillAmount *= 0.50;
		} else if(time < 500) {
			fillAmount *= 0.91;
		} else {
			fillAmount *= 0.50;
		}
		double fill = $pool.getResourceLevel() + fillAmount;
		modify($pool) {
			setResourceLevel(fill),
			setStartResourceLevel(fill),
			setLastFilled( time )
			
		}
		//logger.info("Fill resource by "+ fillAmount +", pool resource level is "+ $pool.getResourceLevel());
		logger.info("Fill resource by "+ fillAmount +", pool" + $pool.getId() + " resource level is "+ $pool.getResourceLevel() +
			" with " + $i.getActiveMemberCount() + " active members (of " + $i.getInitialAgents() + ")");
end



rule "Refill pool - HIGH/MEDIUM/LOW scheme"
	salience -10
	ruleflow-group 'init'
	when
		$t : IntegerTime() 
		($pool : CommonPool( $t.intValue() > getLastFilled(), getRefScheme() == RefillScheme.HIGH)
		or
		$pool : CommonPool( $t.intValue() > getLastFilled(), getRefScheme() == RefillScheme.MEDIUM)
		or
		$pool : CommonPool( $t.intValue() > getLastFilled(), getRefScheme() == RefillScheme.LOW)
		)
		Institution( pool == $pool )
	then 
		double fillAmount = $pool.getMaxLevel() / 2;
		int time = $t.intValue();
		if ($pool.getRefScheme() == RefillScheme.HIGH){
			fillAmount *= 0.95;
		} else if ($pool.getRefScheme() == RefillScheme.MEDIUM){
			fillAmount *= 0.80;
		}else{ //RefillScheme.LOW
			fillAmount *= 0.50;
		}
		double fill = $pool.getResourceLevel() + fillAmount;
		modify($pool) {
			setResourceLevel(fill),
			setStartResourceLevel(fill),
			setLastFilled( time )
		}
		logger.info("Fill resource by "+ fillAmount +", pool resource level is "+ $pool.getResourceLevel());
end



rule "Adjust maximum pool level - any CLUSTER scheme" //before refill takes place
salience -9
	ruleflow-group 'init'
	when
		$t : IntegerTime() 
		$pool : CommonPool( $t.intValue() > getLastFilled())
		$i : Institution( pool == $pool, changeCluster == true )
		 Member($sr : getStandardRequest())
		not LevelAdjusted( institution == $i, round == $t)
	then
		double maxL = 2*$sr*((double) $i.getActiveMemberCount()); 
		modify($pool){
			setMaxLevel(maxL)
		}
		insert( new LevelAdjusted( $i, $t ) );
end
	

rule "Refill pool - MEMBER scheme"
	salience -10
	ruleflow-group 'init'
	when
		// when a new round occurs
		$t : IntegerTime() 
		// and there is a pool which has not been filled in this round
		$pool : CommonPool( $t.intValue() > getLastFilled(), getRefScheme() == RefillScheme.MEMBER)
		$i : Institution($iid : id, pool == $pool, $count : activeMemberCount)
		$head : Head(institutionId == $iid, $req : standardRequest)
		// and the institution governing this pool is in the 'Exclude' phase
	then // refill pool
		double fillAmount = 0.80 * $count * $req; // percentage of active agents that gets resource
		int time = $t.intValue();
		double fill = $pool.getResourceLevel() + fillAmount;
		modify($pool) {
			setResourceLevel(fill),
			setStartResourceLevel(fill),
			setLastFilled( time )
		}
		logger.info("Fill resource with MEMBER scheme by "+ fillAmount +", pool resource level is "+ $pool.getResourceLevel());
end

rule "NonMember appropriation"
	salience 1000
	ruleflow-group "appropriate"
	no-loop
	when
		$t : IntegerTime( )
		$nonmember : NonMember( $pid : pool )
		$pool : CommonPool( id == $pid )
		not Appropriated( round == $t.intValue(), agent == $nonmember.getName() )
	then
		Appropriated app = new Appropriated( $nonmember.getName(), $t.intValue(), $nonmember.appropriate( $pool ), $pool );
		insert( app );
		modify($pool) {
			setResourceLevel( $pool.getResourceLevel() - app.getQuantity() )
		}
		logger.info(app);
		//logger.info($pool);
end

rule "End of the world"
	ruleflow-group 'init'
	when
		$pool : CommonPool( resourceLevel < 0 )
		Institution($iid : id, pool == $pool)
		$members : List() from collect( Member( institutionId == $iid) )
	then
		retract($pool);
		for(Object m : $members) {
			retract(m);
			insert(new NonMember((Member) m));
		}
		logger.info("DEPLEATED!!");
end


