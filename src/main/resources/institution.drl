package allocation

import allocation.*
import allocation.facts.*
import allocation.actions.*
import allocation.newagents.*
import uk.ac.imperial.presage2.core.IntegerTime
import java.util.HashMap
import java.util.List
import java.util.Set

global org.apache.log4j.Logger logger

declare TaskExecuted
	institution : Institution
	task : String
	round : int
end

declare Monitored
	agent : String
	round : int
end

declare Deducted
	monitor : Monitored
end

rule "Increment round"
	ruleflow-group 'init'
	when
		$t : IntegerTime()
		$i : Institution( round < $t.intValue() )
	then
		modify($i) {
			incrementRound()
		}
end

rule "Call for votes"
	ruleflow-group 'cfv'
	no-loop
	when
		IntegerTime()
		$head : Head( $iid : institutionId )
		$i : Institution( id == $iid )
	then
		CallForVote cfv = $head.callForVotes( $i );
		if(cfv != null) {
			modify( $i ) {
				setVoteHead( cfv.isHead() ),
				setVoteRaMethod( cfv.isRaMethod() )
			}
			logger.info(cfv);
		}
end

rule "Disable votes"
	ruleflow-group 'init'
	when 
		$inst : Institution( voteHead || voteRaMethod )
	then
		modify($inst) {
			setVoteHead( false ),
			setVoteRaMethod( false )
		}
end

rule "Vote RA method"
	salience 1000
	ruleflow-group 'vote'
	when
		$t : IntegerTime( )
		$member : Member( $iid : institutionId, $pid : pool )
		$i : Institution( id == $iid, voteRaMethod )
		$pool : CommonPool( id == $pid )
	then
		Vote v = $member.vote( $i, $pool, "raMethod" );
		if(v != null) {
			v.setVoter( $member.getName() );
			v.setRound( $t.intValue() );
			insert(v);
			logger.info(v);
		}
end

rule "Declare vote winner"
	ruleflow-group 'vote'
	when
		Institution( $iid : id, $round : round )
		Vote( $ag : voter, round == $round, $b : ballot )
		Member( name == $ag, institutionId == $iid )
		not Declared( institution == $iid, ballot == $b, round == $round )
		$votes : List( size > 0 ) from accumulate( 
			$v : Vote( $voter : voter, round == $round, ballot == $b ) and 
			Member( name == $voter, institutionId == $iid ) , collectList($v) )
	then
		HashMap<Integer, Integer> tally = new HashMap<Integer, Integer>();
		for( Object o : $votes ) {
			Vote v = (Vote) o;
			if(tally.containsKey(v.getValue())) {
				tally.put(v.getValue(), tally.get(v.getValue()) + 1);
			} else {
				tally.put(v.getValue(), 1);
			}
		}
		insert( new Declared( $iid, $b, $round, tally ) );
end

rule "Echo declared"
	ruleflow-group 'vote'
	when
		$d : Declared()
	then
		logger.info( $d );
end

rule "Update Ra method"
	ruleflow-group 'vote'
	when
		$d : Declared( ballot == "raMethod", $iid : institution )
		$i : Institution( id == $iid, round == $d.round )
	then
		Integer forQueue = $d.result.get(RaMethod.QUEUE.ordinal());
		Integer forRation = $d.result.get(RaMethod.RATION.ordinal());
		if(forQueue == null) forQueue = 0;
		if(forRation == null) forRation = 0;

		if(forQueue > forRation) {
			$i.setAllocationMethod( RaMethod.QUEUE );
		} else if(forRation > forQueue) {
			$i.setAllocationMethod( RaMethod.RATION );
		}
		logger.info("Allocation method for institution "+ $iid +" set to "+ $i.getAllocationMethod()); 
end

rule "Member Demands"
	salience 1000
	ruleflow-group 'demand'
	when
		$inst : Institution( $iid : id, $round : round, $pools : pools, principle2 == true )
		$pool : CommonPool( this memberOf $pools )
		$member : Member( institutionId == $iid )
	then
		insert( new Demand( $round, $pool.getId(), $member.getName(), $member.demand( $inst, $pool ) ) );
end

rule "Do allocation"
	ruleflow-group 'allocate'
	when
		// get an institution in allocate phase
		$inst : Institution( $iid : id, $round : round, $pools : pools )
		// get a pool from this institution
		$pool : CommonPool( this memberOf $pools )
		// get the head
		$ag : Head( institutionId == $iid )
		// get demands for this pool
		$demands : List( size > 0 ) from collect( Demand( pool == $pool.id ) )
	then
		logger.info( $ag );
		logger.info( $demands );
		Set<Allocation> allocations = $ag.allocate($inst, $pool, $demands);
		logger.info(allocations);
		for(Allocation a : allocations) {
			insert(a);
		}
end

rule "Member appropriation - no allocation"
	salience 1000
	ruleflow-group "appropriate"
	no-loop
	when
		$t : IntegerTime( )
		$member : Member( $iid : institutionId, $pid : pool )
		$i : Institution( id == $iid, $round : round )
		$pool : CommonPool( id == $pid )
		not Appropriated( round == $t.intValue(), agent == $member.getName() )
		not Allocation( round == $round, agent == $member.getName() )
	then
		double appropriatedAmount = $member.appropriate( $i, $pool, null );
		Appropriated app = new Appropriated( $member.getName(), $t.intValue(), appropriatedAmount );
		insert( app );
		modify($pool) {
			setResourceLevel( $pool.getResourceLevel() - appropriatedAmount )
		}
		logger.info(app);
		logger.info($pool);
end

rule "Member appropriation - allocated"
	salience 1000
	ruleflow-group "appropriate"
	no-loop
	when
		$t : IntegerTime( )
		$member : Member( $iid : institutionId, $pid : pool )
		$i : Institution( id == $iid, $round : round )
		$pool : CommonPool( id == $pid )
		not Appropriated( round == $t.intValue(), agent == $member.getName() )
		$all : Allocation( round == $round, agent == $member.getName() )
	then
		double appropriatedAmount = $member.appropriate( $i, $pool, $all );
		Appropriated app = new Appropriated( $member.getName(), $t.intValue(), appropriatedAmount );
		insert( app );
		modify($pool) {
			setResourceLevel( $pool.getResourceLevel() - appropriatedAmount )
		}
		logger.info(app);
		logger.info($pool);
end

rule "Monitor agents"
	ruleflow-group "appropriate"
	salience 1000
	when
		$i : Institution( $iid : id, $round : round )
		not TaskExecuted( $i, "monitor", $round ;)
		$head : Head( institutionId == $iid, $pid : pool )
		$pool : CommonPool( id == $pid )
		$members : Set( ) from collect( Member( institutionId == $iid ) )
		$nonMembers : Set( ) from collect( Agent( pool == $pid ) )
	then
		Set<String> monitored = $head.monitor( $i, $pool, $members, $nonMembers );
		logger.info(monitored);
		for( String agent : monitored ) {
			insert( new Monitored( agent, $round ) );
		}
		insert( new TaskExecuted( $i, "monitor", $round ) );
end

rule "Deduct member monitoring cost" //julia: happens after appropriation!! 
	ruleflow-group "appropriate"
	no-loop
	when
		$i : Institution( $iid : id, $round : round )
		$m : Monitored( $name : agent, round == $round )
		not Deducted( $m ;)
		Member( name == $name, institutionId == $iid, $pid : pool )
		$pool : CommonPool( id == $pid )
	then
		modify( $pool ) {
			setResourceLevel( $pool.getResourceLevel() - $i.getMonitoringCost() ) 
		}
		insert( new Deducted( $m ) );
end

rule "Deduct nonmember monitoring cost" //julia: happens after appropriation!! 
	ruleflow-group "appropriate"
	no-loop
	when
		$pool : CommonPool( $pid : id )
		$i : Institution( $round : round, pools contains $pool )
		$m : Monitored( $name : agent, round == $round )
		not Deducted( $m ;)
		NonMember( name == $name, pool == $pid )
	then
		modify( $pool ) {
			setResourceLevel( $pool.getResourceLevel() - $i.getOutMonitoringCost() ) 
		}
		insert( new Deducted( $m ) );
end

/*rule "Sanction nonmembers and change appropriating frequency" //julia: check conditions
	when
		$i : Institution( $iid : id, $round : round, state == Phase.Appropriate )
		OutMonitor( $ag : outMonitored, round == $round )
		Agent( this == $ag, institutionId == $iid)
		$pool : CommonPool( id == $ag.getPool() )
		//Allocation( player == $ag, round == $round, $quantity : quantity)
		Appropriate(player == $ag, round == $round, pool == $pool, amount > 0)
    then
    	// $ag.active = false;
    	/*modify($i){//non-member-wide variables (or these variables could be tied to an institution => describes how hard/easy it is to appropriate there)
			setOutAppropriationFrequency($i.getOutAppropriationFrequency() *$i.outImproveFrequency)//appropriate less in future rounds
		}*/
//end

